[{"D:\\web\\react\\my-app\\src\\index.js":"1","D:\\web\\react\\my-app\\src\\MapChart.js":"2"},{"size":708,"mtime":1607384662981,"results":"3","hashOfConfig":"4"},{"size":3717,"mtime":1607385315321,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1pjubio",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"D:\\web\\react\\my-app\\src\\index.js",[],["12","13"],"D:\\web\\react\\my-app\\src\\MapChart.js",["14","15"],"import React from \"react\";\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography,\r\n    Graticule\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nfunction parseTime( t ) {\r\n    var d = new Date();\r\n    var time = t.match( /(\\d+)(?::(\\d\\d))?\\s*(p?)/ );\r\n    d.setHours( parseInt( time[1]) + (time[3] ? 12 : 0) );\r\n    d.setMinutes( parseInt( time[2]) || 0 );\r\n    return d;\r\n}\r\n\r\nDate.prototype.stdTimezoneOffset = function () {\r\n    var jan = new Date(this.getFullYear(), 0, 1);\r\n    var jul = new Date(this.getFullYear(), 6, 1);\r\n    return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\r\n}\r\n\r\nDate.prototype.isDstObserved = function () {\r\n    return this.getTimezoneOffset() < this.stdTimezoneOffset();\r\n}\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n    return (\r\n        <ComposableMap\r\n            data-tip=\"\"\r\n            projection=\"geoAzimuthalEqualArea\"\r\n            projectionConfig={{\r\n                rotate: [-10.0, -52.0, 0],\r\n                scale: 1100\r\n            }}\r\n        >\r\n            <Graticule stroke=\"#EAEAEC\" />\r\n            <Geographies geography={geoUrl}>\r\n                {({ geographies }) =>\r\n                    geographies.map(geo => (\r\n                        <Geography\r\n                            key={geo.rsmKey}\r\n                            geography={geo}\r\n                            fill=\"#9998A3\"\r\n                            stroke=\"#EAEAEC\"\r\n\r\n                            onMouseEnter={() => {\r\n                                const { NAME, ISO_A2 } = geo.properties;\r\n\r\n                                const ct = require('countries-and-timezones');\r\n                                const timezone = ct.getTimezonesForCountry(ISO_A2);\r\n                                var now = new Date(Date.now())\r\n                                if(timezone != null)\r\n                                {\r\n                                    var time = 0\r\n                                    var h = 0\r\n                                    if (now.isDstObserved()) {\r\n                                        time = timezone[0].dstOffsetStr\r\n                                        h = 3\r\n                                    }\r\n                                    else {\r\n                                        time = timezone[0].utcOffsetStr\r\n                                        h = 2\r\n                                    }\r\n\r\n                                    var tmp = parseTime(time).getHours() - h\r\n\r\n                                    setTooltipContent(NAME + \" \" + (tmp > 0 ? \"+\" : \"\") + tmp + \" hour\" + (tmp > 1 || tmp < -1 ? \"s\" : \"\"));\r\n\r\n                                }\r\n                            }}\r\n                            onMouseLeave={() => {\r\n                                setTooltipContent(\"\");\r\n                            }}\r\n                            style={{\r\n                                default: {\r\n                                    fill: \"#D6D6DA\",\r\n                                    outline: \"none\"\r\n                                },\r\n                                hover: {\r\n                                    fill: \"#F53\",\r\n                                    outline: \"none\"\r\n                                },\r\n                                pressed: {\r\n                                    fill: \"#E42\",\r\n                                    outline: \"none\"\r\n                                }\r\n                            }}\r\n                        />\r\n                    ))\r\n                }\r\n            </Geographies>\r\n        </ComposableMap>\r\n    );\r\n};\r\n\r\nexport default MapChart;\r\n",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":20,"column":1,"nodeType":"22","messageId":"23","endLine":24,"endColumn":2},{"ruleId":"20","severity":1,"message":"21","line":26,"column":1,"nodeType":"22","messageId":"23","endLine":28,"endColumn":2},"no-native-reassign",["24"],"no-negated-in-lhs",["25"],"no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected","no-global-assign","no-unsafe-negation"]